services:

  database:
    env_file:
      - ./environment-variables/database.env
    healthcheck:
      test: ["CMD-SHELL", "mongosh localhost:27017/test --quiet --eval='db.runCommand(\"ping\").ok || failure()' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    image: mongo:6.0.4
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ./database/data:/data/db:rw
      - ./database/initialization-scripts:/docker-entrypoint-initdb.d:ro

  messaging-service:
    command: /bin/sh -c "redis-server --requirepass $$REDIS_PASSWORD"
    env_file:
      - ./environment-variables/messaging-service.env
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    image: redis:7.0.11

  micro-service-auth:
    command: npm run start:dev
    depends_on:
      messaging-service:
        condition: service_healthy
    env_file:
      - ./environment-variables/micro-service-auth.env
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5001/app/health-check || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    image: node:18.12.1
    ports:
      - "5001:5001/tcp"
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ./micro-services/auth:/app:rw
    working_dir: /app

  micro-service-formal-system:
    command: npm run start:dev
    env_file:
      - ./environment-variables/micro-service-formal-system.env
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5002/app/health-check || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    image: node:18.12.1
    ports:
      - "5002:5002/tcp"
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ./micro-services/formal-system:/app:rw
    working_dir: /app

  micro-service-user:
    command: npm run start:dev
    depends_on:
      database:
        condition: service_healthy
      messaging-service:
        condition: service_healthy
    env_file:
      - ./environment-variables/micro-service-user.env
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5003/app/health-check || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    image: node:18.12.1
    ports:
      - "5003:5003/tcp"
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ./micro-services/user:/app:rw
    working_dir: /app

  micro-front-end-auth:
    command: npm run dev
    depends_on:
      micro-service-auth:
        condition: service_healthy
    env_file:
      - ./environment-variables/micro-front-end-auth.env
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:3001/api/app || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    image: node:18.12.1
    ports:
      - "3001:3001/tcp"
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ./micro-front-ends/auth:/app:rw
    working_dir: /app

  micro-front-end-user:
    command: npm run dev
    depends_on:
      micro-service-user:
        condition: service_healthy
    env_file:
      - ./environment-variables/micro-front-end-user.env
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:3002/api/app || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    image: node:18.12.1
    ports:
      - "3002:3002/tcp"
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ./micro-front-ends/user:/app:rw
    working_dir: /app

  application:
    command: npm run dev
    depends_on:
      micro-service-formal-system:
        condition: service_healthy
      micro-front-end-auth:
        condition: service_healthy
      micro-front-end-user:
        condition: service_healthy
    env_file:
      - ./environment-variables/application.env
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:3000/api/app || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    image: node:18.12.1
    init: true
    ports:
      - "3000:3000/tcp"
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ./application:/app:rw
    working_dir: /app

  npm-micro-service-auth:
    entrypoint: npm
    image: node:18.12.1
    stdin_open: true
    tty: true
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ./micro-services/auth:/app:rw
    working_dir: /app

  npm-micro-service-formal-system:
    entrypoint: npm
    image: node:18.12.1
    stdin_open: true
    tty: true
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ./micro-services/formal-system:/app:rw
    working_dir: /app

  npm-micro-service-user:
    entrypoint: npm
    image: node:18.12.1
    stdin_open: true
    tty: true
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ./micro-services/user:/app:rw
    working_dir: /app

  npm-micro-front-end-auth:
    entrypoint: npm
    env_file:
      - ./environment-variables/npm-micro-front-end-auth.env
    image: node:18.12.1
    stdin_open: true
    tty: true
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ./micro-front-ends/auth:/app:rw
    working_dir: /app

  npm-micro-front-end-user:
    entrypoint: npm
    env_file:
      - ./environment-variables/npm-micro-front-end-user.env
    image: node:18.12.1
    stdin_open: true
    tty: true
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ./micro-front-ends/user:/app:rw
    working_dir: /app

  npm-application:
    entrypoint: npm
    env_file:
      - ./environment-variables/npm-application.env
    image: node:18.12.1
    stdin_open: true
    tty: true
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ./application:/app:rw
    working_dir: /app
